/*
by Risa Sundu & David Shin
 References:
 - sparkfun tutorial for serial communication between Processing and Arduino: https://learn.sparkfun.com/tutorials/connecting-arduino-to-processing/all#from-processing
 - cotterjk on stack overflow for pixel magnification: https://stackoverflow.com/questions/73562932/how-to-magnify-display-working-with-pixels-in-processing-java
 - creativecoding on p5.js for grid drawing: https://editor.p5js.org/creativecoding/sketches/duUe1NqJz
 - Nick Gammon on Gammon Forum for buffering serial input: https://www.gammon.com.au/forum/bbshowpost.php?bbsubject_id=11425&page=1
 Thanks also to Molly, Leo, Adin, & Colin @ UCSD's EnVision Maker Studio for lots of support & guidance
 */

import processing.serial.*;
import gab.opencv.*;
import processing.video.*;
import java.awt.Rectangle;
import org.opencv.core.Core;

Serial myPort;  // Create object from Serial class
Capture video;
OpenCV opencv;
PImage img = createImage(27, 24, RGB); // LED matrix dimensions

int scaleFactor = 10; // Scale factor for LED matrix display
boolean isSpacebarPressed = false; // State of the spacebar

void setup() {
  size(480 + 270, 480); // Adjusted window size for video and LED matrix side by side
  video = new Capture(this, 480, 480);
  opencv = new OpenCV(this, 480, 480);
  opencv.loadCascade(OpenCV.CASCADE_FRONTALFACE);
  video.start();

  frameRate(10);
  clearMatrix();
  noSmooth(); // For crisp pixel resizing

  background(255);

  // Initialize serial communication
  String portName = Serial.list()[1]; // Adjust to match your port
  myPort = new Serial(this, portName, 115200); // Adjust baud rate as needed
}

void draw() {
  if (video.available()) {
    video.read();
    pushMatrix(); // Save the current transformation matrix
    translate(video.width, 0); // Move the origin to the right edge of the video
    scale(-1.0, 1.0); // Flip the video feed horizontally
    image(video, 0, 0); // Display the mirrored video feed
    popMatrix(); // Restore the transformation matrix
  }
  opencv.loadImage(video);

  // Display the video feed on the right side of the window directly (not mirrored)
  image(video, img.width * scaleFactor, 0);

  clearMatrix(); // Clear LED matrix

  if (isSpacebarPressed) {
    detectFace();
  } else {
    activateRandomButtons();
  }

  updatePixels();
  drawGrid(); // Draw the grid for LED matrix reference
  writeSerial(); // Communicate with Arduino
}

void keyPressed() {
  if (key == ' ') {
    isSpacebarPressed = true;
  }
}

void keyReleased() {
  if (key == ' ') {
    isSpacebarPressed = false;
  }
}

void activateRandomButtons() {
  clearMatrix(); // Clear matrix to start fresh
  int numPixelsToActivate = (img.width * img.height) / 10; // Activate 10% of the grid
  for (int i = 0; i < numPixelsToActivate; i++) {
    int randomX = int(random(img.width));
    int randomY = int(random(img.height));
    img.pixels[randomX + randomY * img.width] = color(100); // Set pixels to a color
  }
  img.updatePixels();
}

void writeSerial() {
  while (myPort.available() > 0) {
    myPort.read(); // Clear the serial buffer
  }

  for (int i = img.width - 1; i >= 0; i--) {
    for (int j = img.height - 1; j >= 0; j--) {
      char colorValue = (img.pixels[i * img.height + j] == color(100)) ? (char) 100 : (char) 0;
      myPort.write(colorValue);
    }
  }
  myPort.write(0xFF); // End of matrix signal
}

void updatePixels() {
  img.updatePixels();
  image(img, 0, 0, img.width * scaleFactor, img.height * scaleFactor); // Display LED matrix
}

void drawGrid() {
  for (int i = 0; i <= img.width * scaleFactor; i += scaleFactor) {
    stroke(0.25);
    line(i, 0, i, img.height * scaleFactor);
  }
  for (int j = 0; j <= img.height * scaleFactor; j += scaleFactor) {
    line(0, j, img.width * scaleFactor, j);
  }
}

void clearMatrix() {
  img.loadPixels();
  for (int i = 0; i < img.pixels.length; i++) {
    img.pixels[i] = color(255); // Set all pixels to white
  }
  img.updatePixels();
}

void detectFace() {
  Rectangle[] faces = opencv.detect(); // Detect faces
  for (Rectangle face : faces) {
    // Convert face coordinates from video to LED matrix scale without mirroring.
    // Since the video is not mirrored, we map directly.
    int ledX = int(map(face.x, 0, video.width, 0, img.width));
    int ledY = int(map(face.y, 0, video.height, 0, img.height));
    int ledW = int(map(face.width, 0, video.width, 0, img.width));
    int ledH = int(map(face.height, 0, video.height, 0, img.height));

    highlightFace(ledX, ledY, ledW, ledH); // Highlight detected face area on the LED matrix.
  }
}

// This function highlights the face area directly; any adjustment for "softening" the edges is kept.
void highlightFace(int x, int y, int w, int h) {
  for (int i = x; i < x + w; i++) {
    for (int j = y; j < y + h; j++) {
      if (i >= 0 && i < img.width && j >= 0 && j < img.height) {
        img.pixels[i + j * img.width] = color(100); // Set color for face area
      }
    }
  }
  // Optional: Soften the edges if needed here, but ensure it matches your non-mirrored logic.

  img.updatePixels();

// make face a little less rectangular
  img.pixels[x+y*img.width] = color(255);
  img.pixels[(x+w-1)+y*img.width] = color(255);
  img.pixels[x+(y+h-1)*img.width] = color(255);
  img.pixels[(x+w-1)+(y+h-1)*img.width] = color(255);

  img.updatePixels();
}
