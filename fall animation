import gab.opencv.*;
import processing.video.*;
import java.awt.Rectangle;
import processing.serial.*;
import org.opencv.core.Core;

Capture video;
OpenCV opencv;
Serial myPort;  // Create object from Serial class
PImage img;
int scaleFactor = 10; // Factor to scale up LED matrix for display
boolean isSpacebarPressed = false; // Track the state of the spacebar
boolean isDownArrowPressed = false; // Track the state of the down arrow key
int fallingSpeed = 2; // Speed of falling pixels
int fallCounter = 0;

void setup() {
  size(640 + 270, 480); // Adjusted to display video and LED matrix side by side
  video = new Capture(this, 640, 480);
  opencv = new OpenCV(this, 640, 480);
  opencv.loadCascade(OpenCV.CASCADE_FRONTALFACE);  
  video.start();
  
  frameRate(10);
  img = createImage(27, 24, RGB); // Initialize LED matrix image
  clearLEDMatrix(); // Initialize LED matrix with all pixels turned off
  noSmooth(); // For crisp resizing of pixels
  
  println(Serial.list()); // Print available serial ports
  String portName = Serial.list()[0]; // Select the correct port for your setup
  myPort = new Serial(this, portName, 115200); // Adjust baud rate to match Arduino
}

void draw() {
  if (video.available()) {
    video.read();
    // Flip the video feed horizontally
    pushMatrix(); // Save the current transformation matrix
    translate(video.width, 0); // Move the origin to the right edge of the video
    scale(-1.0, 1.0); // Flip the video feed horizontally
    image(video, 0, 0); // Display the mirrored video feed
    popMatrix(); // Restore the transformation matrix
  }
  opencv.loadImage(video);
  
  if (isSpacebarPressed) {
    Rectangle[] faces = opencv.detect(); // Detect faces
    clearLEDMatrix();
    if (faces.length > 0) {
      for (Rectangle face : faces) {
        // Adjust face.x for the mirrored video
        int mirroredX = video.width - (face.x + face.width);
        drawFaceArea(mirroredX, face.y, face.width, face.height);
      }
    }
  } else if (isDownArrowPressed) {
    animateFallingPixels();
  } else {
    activateRandomButtons();
  }
  
  image(img, 640, 0, img.width * scaleFactor, img.height * scaleFactor); // Draw the scaled-up LED matrix on the right side of the window
  drawGrid();
}

void keyPressed() {
  if (key == ' ') { // Check if the pressed key is the spacebar
    isSpacebarPressed = true;
  }
  if (keyCode == DOWN) { // Check if the pressed key is the down arrow key
    isDownArrowPressed = true;
  }
}

void keyReleased() {
  if (key == ' ') { // Check if the released key is the spacebar
    isSpacebarPressed = false;
  }
  if (keyCode == DOWN) { // Check if the released key is the down arrow key
    isDownArrowPressed = false;
  }
}

void clearLEDMatrix() {
  img.loadPixels();
  for (int i = 0; i < img.pixels.length; i++) {
    img.pixels[i] = color(255); // Set all pixels to white (off)
  }
  img.updatePixels();
}

void drawFaceArea(int x, int y, int w, int h) {
  int ledX = int(map(x, 0, video.width, 0, img.width));
  int ledY = int(map(y, 0, video.height, 0, img.height));
  int ledW = int(map(w, 0, video.width, 0, img.width));
  int ledH = int(map(h, 0, video.height, 0, img.height));
  
  img.loadPixels();
  for (int i = ledX; i < ledX + ledW; i++) {
    for (int j = ledY; j < ledY + ledH; j++) {
      if (i >= 0 && i < img.width && j >= 0 && j < img.height) {
        img.pixels[i + j * img.width] = color(0, 255, 0); // Set color to indicate face detection
      }
    }
  }
  img.updatePixels();
}

void activateRandomButtons() {
  clearLEDMatrix(); // Clear the matrix to start fresh
  int numPixelsToActivate = (img.width * img.height) / 10; // Activate 10% of the grid
  for (int i = 0; i < numPixelsToActivate; i++) {
    int randomX = int(random(img.width));
    int randomY = int(random(img.height));
    img.pixels[randomX + randomY * img.width] = color(255, 0, 0); // Randomly activated pixels colored red
  }
  img.updatePixels();
}

void drawGrid() {
  stroke(0);
  // Draw vertical grid lines
  for (int i = 640; i <= 640 + img.width * scaleFactor; i += scaleFactor) {
    line(i, 0, i, img.height * scaleFactor);
  }
  // Draw horizontal grid lines
  for (int j = 0; j <= img.height * scaleFactor; j += scaleFactor) {
    line(640, j, 640 + img.width * scaleFactor, j);
  }
}

void animateFallingPixels() {
  if (fallCounter % fallingSpeed == 0) {
    // Move all pixels down by one row
    for (int y = img.height - 2; y >= 0; y--) {
      for (int x = 0; x < img.width; x++) {
        int currentPixel = img.pixels[x + y * img.width];
        if (currentPixel != color(255)) { // Check if the pixel is not white (active)
          // Move the pixel down by one row
          img.pixels[x + (y + 1) * img.width] = currentPixel;
          img.pixels[x + y * img.width] = color(255); // Turn off the current pixel
        }
      }
    }
    // Generate new pixels at the top row
    for (int x = 0; x < img.width; x++) {
      if (random(1) > 0.5) { // Randomly activate pixels
        img.pixels[x] = color(255, 0, 0); // Set color to red
      } else {
        img.pixels[x] = color(255); // Set color to white (off)
      }
    }
    img.updatePixels();
  }
  fallCounter++;
}
